#!/bin/bash

# Define a function for displaying exit messages
exit_message() {
    echo "There was an error during the script execution and the process stopped. No worries!"
    echo "You can try to run the script from scratch again."
    echo "If you still receive an error, you may want to proceed manually, step by step instead of using the auto-installer."
}

# Step 0: Check sudo availability
if ! [ -x "$(command -v sudo)" ]; then
  echo "Sudo is not installed! This script requires sudo to run. Exiting..." >&2
  exit_message
  exit 1
fi

# Step 1: Update package lists
echo "Updating package lists..."
sudo apt -q update || { echo "Failed to update package lists! Exiting..."; exit_message; exit 1; }

# Step 2: Install required packages
echo "Installing required packages..."
sudo apt-get install git wget tmux tar -y || { echo "Failed to install required packages! Exiting..."; exit_message; exit 1; }

# Step 3: Download and extract Go
if [[ $(go version) == *"go1.20.1"[1-4]* ]]; then
  echo "Correct version of Go is already installed, moving on..."
else
  echo "Installing the necessary version of Go..."
  wget -4 https://golang.google.cn/dl/go1.20.14.linux-amd64.tar.gz || { echo "Failed to download Go! Exiting..."; exit_message; exit 1; }
  sudo tar -C /usr/local -xzf go1.20.14.linux-amd64.tar.gz || { echo "Failed to extract Go! Exiting..."; exit_message; exit 1; }
  sudo rm go1.20.14.linux-amd64.tar.gz || { echo "Failed to remove downloaded archive! Exiting..."; exit_message; exit 1; }
fi

# Step 4: Set Go environment variables
echo "Setting Go environment variables..."

# Check if PATH is already set
if grep -q 'export PATH=$PATH:/usr/local/go/bin' ~/.bashrc; then
    echo "PATH already set in ~/.bashrc."
else
    echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
    echo "PATH set in ~/.bashrc."
fi

# Check if GOPATH is already set
if grep -q "export GOPATH=$HOME/go" ~/.bashrc; then
    echo "GOPATH already set in ~/.bashrc."
else
    echo "export GOPATH=$HOME/go" >> ~/.bashrc
    echo "GOPATH set in ~/.bashrc."
fi

# Check if GO111MODULE is already set
if grep -q "export GO111MODULE=on" ~/.bashrc; then
    echo "GO111MODULE already set in ~/.bashrc."
else
    echo "export GO111MODULE=on" >> ~/.bashrc
    echo "GO111MODULE set in ~/.bashrc."
fi

# Check if GOPROXY is already set
if grep -q "export GOPROXY=https://goproxy.cn,direct" ~/.bashrc; then
    echo "GOPROXY already set in ~/.bashrc."
else
    echo "export GOPROXY=https://goproxy.cn,direct" >> ~/.bashrc
    echo "GOPROXY set in ~/.bashrc."
fi

# Source .bashrc to apply changes
source ~/.bashrc
sleep 1  # Add a 1-second delay

# Step 5: Create swap space
if ! [ "$(sudo swapon -s)" ]; then
  echo "Creating swap space..."
  sudo mkdir /swap && sudo fallocate -l 10G /swap/swapfile && sudo chmod 600 /swap/swapfile || { echo "Failed to create swap space! Exiting..."; exit_message; exit 1; }
  sudo mkswap /swap/swapfile && sudo swapon /swap/swapfile || { echo "Failed to set up swap space! Exiting..."; exit_message; exit 1; }
  sudo bash -c 'echo "/swap/swapfile swap swap defaults 0 0" >> /etc/fstab' || { echo "Failed to update /etc/fstab! Exiting..."; exit_message; exit 1; }
fi

# Step 6: Adjust network buffer sizes
echo "Adjusting network buffer sizes..."
if [[ $(grep ^"net.core.rmem_max=600000000"$ /etc/sysctl.conf) ]]; then
  echo "\net.core.rmem_max=600000000\" found inside /etc/sysctl.conf, skipping..."
else
  echo -e "\n# Change made to increase buffer sizes for better network performance for ceremonyclient\nnet.core.rmem_max=600000000" | sudo tee -a /etc/sysctl.conf > /dev/null
fi
if [[ $(grep ^"net.core.wmem_max=600000000"$ /etc/sysctl.conf) ]]; then
  echo "\net.core.wmem_max=600000000\" found inside /etc/sysctl.conf, skipping..."
else
  echo -e "\n# Change made to increase buffer sizes for better network performance for ceremonyclient\nnet.core.wmem_max=600000000" | sudo tee -a /etc/sysctl.conf > /dev/null
fi
sudo sysctl -p

# Step 7: Install ufw and configure firewall
echo "Installing ufw (Uncomplicated Firewall)..."
sudo apt-get update
sudo apt-get install ufw -y || { echo "Failed to install ufw! Moving on to the next step..."; }

# Attempt to enable ufw
echo "Configuring firewall..."
if command -v ufw >/dev/null 2>&1; then
    echo "y" | sudo ufw enable || { echo "Failed to enable firewall! No worries, you can do it later manually."; }
else
    echo "ufw (Uncomplicated Firewall) is not installed. Skipping firewall configuration."
fi

# Check if ufw is available and configured
if command -v ufw >/dev/null 2>&1 && sudo ufw status | grep -q "Status: active"; then
    # Allow required ports
    for port in 22 8336 443; do
        if ! ufw_rule_exists "${port}"; then
            sudo ufw allow "${port}" || echo "Error: Failed to allow port ${port}! You will need to allow port 8336 manually for the node to connect."
        fi
    done

    # Display firewall status
    sudo ufw status
    echo "Firewall setup was successful."
else
    echo "Failed to configure firewall or ufw is not installed. No worries, you can do it later manually.  Moving on to the next step..."
fi

# Step 8: Creating some useful folders
# Create /root/backup/ folder if it doesn't exist already
echo "Creating /root/backup/ folder..."
mkdir -p /root/backup/
echo "Done."

# Create /root/scripts/ folder if it doesn't exist already
echo "Creating /root/scripts/ folder..."
mkdir -p /root/scripts/
echo "Done."

# Create /root/scripts/log/ folder if it doesn't exist already
echo "Creating /root/scripts/log/ folder..."
mkdir -p /root/scripts/log/
echo "Done."

# Step 9: Create qnode_restart.sh script and set permissions
echo "Creating qnode_restart.sh script..."

# Check if the file already exists
if [ ! -f "/root/scripts/qnode_restart.sh" ]; then
    # Attempt to download the script
    sudo wget -O /root/scripts/qnode_restart.sh https://github.moeyy.xyz/https://raw.githubusercontent.com/lamat1111/quilibrium-node-auto-installer/master/qnode_restart

    # Check the exit status of wget
    if [ $? -eq 0 ]; then
        sudo chmod +x /root/scripts/qnode_restart.sh
        echo "qnode_restart.sh script created and permissions set."
    else
        echo "Failed to download qnode_restart.sh script. You will have to do this manually later. Moving on to the next step..."
    fi
else
    echo "qnode_restart.sh script already exists. Skipping download."
fi

# Step 10: Prompt for reboot
echo "Server setup is finished"
echo "Type 'sudo reboot' and press ENTER to reboot your server."
echo "Then follow the online guide for the next steps to install your Quilibrium node: https://iri.quest/quilibrium-node-guide"

